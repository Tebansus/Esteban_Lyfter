import sqlite3
import os

if os.path.exists('week_3.db'):
    os.remove('week_3.db')
    
con = sqlite3.connect('week_3.db')

cur = con.cursor()
# Create a table with the 4 names and columns defined previously. In the case of brand, this can be null to allow for products that do not have a brand.
cur.executescript(
    '''
CREATE TABLE invoices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    invoice_number VARCHAR(25) UNIQUE NOT NULL,
    purchase_date DATE NOT NULL,
    buyer_email VARCHAR(50) NOT NULL,
    total_amount DECIMAL(32, 4) NOT NULL
);

CREATE TABLE products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code VARCHAR(25) UNIQUE NOT NULL,
    name VARCHAR(50) NOT NULL,
    price DECIMAL(32, 4) NOT NULL,
    date_received DATE NOT NULL,
    brand VARCHAR(50)
);

CREATE TABLE invoice_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    invoice_id INTEGER NOT NULL REFERENCES invoices(id) ON DELETE CASCADE,
    product_id INTEGER NOT NULL REFERENCES products(id),
    quantity INT NOT NULL,
    line_total DECIMAL(32, 4) NOT NULL
);

CREATE TABLE shopping_carts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    buyer_email VARCHAR(50) NOT NULL,
    date_created DATE DEFAULT CURRENT_DATE,  
    status VARCHAR(20)  DEFAULT 'open', 
    UNIQUE (id, buyer_email)                     
);

CREATE TABLE shopping_cart_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    shopping_cart_id INTEGER NOT NULL REFERENCES shopping_carts(id) ON DELETE CASCADE, 
    product_id INTEGER NOT NULL REFERENCES products(id),
    quantity INT NOT NULL CHECK (quantity > 0),
    line_total DECIMAL(32, 4) NOT NULL
    );
    '''
)
con.commit()
# Then, add the new columns to the invoices table. The default values are set to '000-0000-0000' for phone numbers and 'XXX-0000' for employee codes.
cur.execute(
    '''
    ALTER TABLE invoices
    ADD buyer_phone_number VARCHAR(25) NOT NULL DEFAULT '000-0000-0000';
    
    '''
)
con.commit()
cur.execute(
    '''
    ALTER TABLE invoices
    ADD employee_code VARCHAR(25) NOT NULL DEFAULT 'XXX-0000';   
    
    '''
)

con.commit()

## Mock data for the tables. The data table dictionaries were generated by ChatGPT (as making up data serves no learning purpose) while the SQL commands were written by me.
# 1. Products

products_data = [
    ('PRD-001', 'Laptop Pro 15"', 199999.99, '2024-05-01', 'TechBrand'),
    ('PRD-002', 'Wireless Mouse',     49.99, '2024-05-02', 'PeriTech'),
    ('PRD-003', 'Mechanical Keyboard',129.50, '2024-05-03', 'KeyMaster'),
    ('PRD-004', 'Ultra-HD Monitor',  599.00, '2024-05-04', 'DisplayCo'),
    ('PRD-005', 'USB-C Hub',          39.95, '2024-05-05', None)
]
# Execute command to insert data into the products table
cur.executemany('''INSERT INTO products (code, name, price, date_received, brand) VALUES (?,?,?,?,?)''', products_data)

# 2. Invoices
# Mock data for the invoices table

invoices_data = [
    ('MAY-001', '2024-05-10', 'alice@example.com', 2549.98),
    ('MAY-002', '2024-05-11', 'bob@example.com',     49.99),
    ('MAY-003', '2024-05-12', 'carol@example.com',  599.00),
    ('MAY-004', '2024-05-13', 'dave@example.com',  2139.49),
    ('MAY-005', '2024-05-14', 'eve@example.com',     39.95)
]
# Execute command to insert data into the invoices table
cur.executemany(  '''INSERT INTO invoices (invoice_number, purchase_date,buyer_email, total_amount) VALUES (?,?,?,?)''', invoices_data)

# 3. Invoice Items
# Mock data for the invoice_items table
# The invoice_items table is a junction table that connects invoices and products.

invoice_items_data = [
    # invoice_id, product_id, quantity, line_total
    (1, 1, 1, 1999.99),
    (1, 2, 1,   49.99),
    (2, 2, 1,   49.99),
    (3, 4, 1,  599.00),
    (4, 3, 1,  129.50),
    (4, 5, 3,  119.85),
    (5, 5, 1,   39.95)
]
cur.executemany('''INSERT INTO invoice_items (invoice_id, product_id, quantity, line_total) VALUES (?,?,?,?)''', invoice_items_data)

# 4. Shopping Carts
# Mock data for the shopping_carts table
# The shopping_carts table stores information about the shopping carts created by buyers.
buyers = [
    ('alice@example.com',),
    ('bob@example.com',),
    ('carol@example.com',),
    ('dave@example.com',),
    ('eve@example.com',)
]
cur.executemany('''INSERT INTO shopping_carts (buyer_email) VALUES (?)''', buyers)

# Build a mapping of buyer_email to shopping_cart_id
cur.execute('SELECT id, buyer_email FROM shopping_carts')
cart_id_for = {email: cart_id for cart_id, email in cur.fetchall()}

#look up product prices
# Build a mapping of product_id to price
cur.execute('SELECT id, price FROM products')
price_for = dict(cur.fetchall())

# Add shopping cart items using the mapping done above
# buyer_email, product_id, quantity
raw_cart_items = [
    
    ('alice@example.com', 3, 1),
    ('bob@example.com',   5, 2),
    ('carol@example.com', 2, 1),
    ('dave@example.com',  4, 1),
    ('eve@example.com',   1, 1)
]
# (shopping_cart_id, product_id, quantity, line_total)
cart_items_data = [
    (                           
        cart_id_for[email],
        prod_id,
        qty,
        round(price_for[prod_id] * qty, 2)
    )
    for email, prod_id, qty in raw_cart_items
]

cur.executemany( '''INSERT INTO shopping_cart_items (shopping_cart_id, product_id, quantity, line_total) VALUES (?,?,?,?)''', cart_items_data)


con.commit()

# Now, let's run some queries to test the database and print the results.
# 1. Select all products

cur.execute(
    '''
    SELECT * FROM products; 
    
    
    '''
    
)

rows = cur.fetchall()
if rows:
    print("select 1")
for row in rows:    
    print(row)


# 2. Select all products with price greater than 50000
cur.execute(
    '''
    SELECT * FROM products
    WHERE price > 50000
    
    '''
    
)
# Fetch and print results
expensive_products = cur.fetchall()
if rows:
    print("select 2")
for product in expensive_products:
    print(product)

# Select 3, products with id 2
cur.execute(
    '''
    SELECT * FROM invoice_items
    WHERE product_id = 2
    
    '''
    
)
purchased_items = cur.fetchall()
if rows:
    print("select 3")
for item in purchased_items:
    print(item)

# Select 4, total quantity of each product sold
cur.execute(
    '''
    SELECT product_id, SUM(quantity) AS total_quantity
    FROM invoice_items
    GROUP BY product_id
    
    
    '''
    
)

total_quantity_per_product = cur.fetchall()
if rows:
    print("select 4")
for product in total_quantity_per_product:
    print(product)

# Select 5, all invoices for a specific email
cur.execute(
    '''
    SELECT * FROM invoices
    WHERE buyer_email = 'alice@example.com'
    
    
    '''
    
)

invoices_for_test_email = cur.fetchall()
if rows:
    print("select 5")
for invoice in invoices_for_test_email:
    print(invoice)


# Select 6, all invoices ordered by total amount in descending order
cur.execute(
    '''
    SELECT * FROM invoices
    ORDER BY total_amount DESC   
    '''
)

descending_invoices = cur.fetchall()
if rows:
    print("select 6")
for invoice in descending_invoices:
    print(invoice)
# Select 7, all invoice details for a specific invoice number
cur.execute(
    '''
    SELECT * FROM invoices
    WHERE invoice_number = 'MAY-001'
    '''
)
invoice_details = cur.fetchall()
if rows:
    print("select 7")
for invoice in invoice_details:
    print(invoice)
    
cur.close()
con.close()